// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tmSTp4sEZSUn4K52S4J5Cc
// Component: Da-4O1R6XR
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: tmSTp4sEZSUn4K52S4J5Cc/projectcss
import * as sty from "./PlasmicLoginScreenLastName.module.css"; // plasmic-import: Da-4O1R6XR/css

export type PlasmicLoginScreenLastName__VariantMembers = {};

export type PlasmicLoginScreenLastName__VariantsArgs = {};
type VariantPropType = keyof PlasmicLoginScreenLastName__VariantsArgs;
export const PlasmicLoginScreenLastName__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLoginScreenLastName__ArgsType = {};
type ArgPropType = keyof PlasmicLoginScreenLastName__ArgsType;
export const PlasmicLoginScreenLastName__ArgProps = new Array<ArgPropType>();

export type PlasmicLoginScreenLastName__OverridesType = {
  root?: p.Flex<"div">;
  rectangle24?: p.Flex<"div">;
  lastName?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultLoginScreenLastNameProps {
  className?: string;
}

function PlasmicLoginScreenLastName__RenderFunc(props: {
  variants: PlasmicLoginScreenLastName__VariantsArgs;
  args: PlasmicLoginScreenLastName__ArgsType;
  overrides: PlasmicLoginScreenLastName__OverridesType;
  dataFetches?: PlasmicLoginScreenLastName__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"rectangle24"}
        data-plasmic-override={overrides.rectangle24}
        className={classNames(defaultcss.all, sty.rectangle24)}
      />

      <div
        data-plasmic-name={"lastName"}
        data-plasmic-override={overrides.lastName}
        className={classNames(defaultcss.all, sty.lastName)}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox
          )}
        >
          {"Last Name"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "rectangle24", "lastName", "freeBox"],
  rectangle24: ["rectangle24"],
  lastName: ["lastName", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  rectangle24: "div";
  lastName: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginScreenLastName__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginScreenLastName__VariantsArgs;
    args?: PlasmicLoginScreenLastName__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLoginScreenLastName__Fetches;
  } & Omit<PlasmicLoginScreenLastName__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLoginScreenLastName__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLoginScreenLastName__ArgProps,
      internalVariantPropNames: PlasmicLoginScreenLastName__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicLoginScreenLastName__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginScreenLastName";
  } else {
    func.displayName = `PlasmicLoginScreenLastName.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginScreenLastName = Object.assign(
  // Top-level PlasmicLoginScreenLastName renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    rectangle24: makeNodeComponent("rectangle24"),
    lastName: makeNodeComponent("lastName"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicLoginScreenLastName
    internalVariantProps: PlasmicLoginScreenLastName__VariantProps,
    internalArgProps: PlasmicLoginScreenLastName__ArgProps
  }
);

export default PlasmicLoginScreenLastName;
/* prettier-ignore-end */
