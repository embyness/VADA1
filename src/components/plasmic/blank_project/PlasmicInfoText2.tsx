// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tmSTp4sEZSUn4K52S4J5Cc
// Component: qVl3P7-CbV
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: tmSTp4sEZSUn4K52S4J5Cc/projectcss
import * as sty from "./PlasmicInfoText2.module.css"; // plasmic-import: qVl3P7-CbV/css

export type PlasmicInfoText2__VariantMembers = {};

export type PlasmicInfoText2__VariantsArgs = {};
type VariantPropType = keyof PlasmicInfoText2__VariantsArgs;
export const PlasmicInfoText2__VariantProps = new Array<VariantPropType>();

export type PlasmicInfoText2__ArgsType = {};
type ArgPropType = keyof PlasmicInfoText2__ArgsType;
export const PlasmicInfoText2__ArgProps = new Array<ArgPropType>();

export type PlasmicInfoText2__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultInfoText2Props {
  className?: string;
}

function PlasmicInfoText2__RenderFunc(props: {
  variants: PlasmicInfoText2__VariantsArgs;
  args: PlasmicInfoText2__ArgsType;
  overrides: PlasmicInfoText2__OverridesType;
  dataFetches?: PlasmicInfoText2__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        defaultcss.__wab_text,
        projectcss.root_reset,
        sty.root
      )}
    >
      {
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
      }
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInfoText2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInfoText2__VariantsArgs;
    args?: PlasmicInfoText2__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInfoText2__Fetches;
  } & Omit<PlasmicInfoText2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInfoText2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInfoText2__ArgProps,
      internalVariantPropNames: PlasmicInfoText2__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInfoText2__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInfoText2";
  } else {
    func.displayName = `PlasmicInfoText2.${nodeName}`;
  }
  return func;
}

export const PlasmicInfoText2 = Object.assign(
  // Top-level PlasmicInfoText2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicInfoText2
    internalVariantProps: PlasmicInfoText2__VariantProps,
    internalArgProps: PlasmicInfoText2__ArgProps
  }
);

export default PlasmicInfoText2;
/* prettier-ignore-end */
