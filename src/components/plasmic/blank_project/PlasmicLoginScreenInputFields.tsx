// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tmSTp4sEZSUn4K52S4J5Cc
// Component: RgbrLvftDJH
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LoginScreenLastName from "../../LoginScreenLastName"; // plasmic-import: Da-4O1R6XR/component
import LoginScreenFirstName from "../../LoginScreenFirstName"; // plasmic-import: X6r6xnnRXH/component
import LoginScreenUsername from "../../LoginScreenUsername"; // plasmic-import: 3cVUvuSuaX/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: tmSTp4sEZSUn4K52S4J5Cc/projectcss
import * as sty from "./PlasmicLoginScreenInputFields.module.css"; // plasmic-import: RgbrLvftDJH/css

export type PlasmicLoginScreenInputFields__VariantMembers = {};

export type PlasmicLoginScreenInputFields__VariantsArgs = {};
type VariantPropType = keyof PlasmicLoginScreenInputFields__VariantsArgs;
export const PlasmicLoginScreenInputFields__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLoginScreenInputFields__ArgsType = {};
type ArgPropType = keyof PlasmicLoginScreenInputFields__ArgsType;
export const PlasmicLoginScreenInputFields__ArgProps = new Array<ArgPropType>();

export type PlasmicLoginScreenInputFields__OverridesType = {
  root?: p.Flex<"div">;
  frame46?: p.Flex<"div">;
  group84?: p.Flex<"div">;
  loginScreenLastName?: p.Flex<typeof LoginScreenLastName>;
  loginScreenFirstName?: p.Flex<typeof LoginScreenFirstName>;
  loginScreenUsername?: p.Flex<typeof LoginScreenUsername>;
  search4?: p.Flex<"div">;
  rectangle27?: p.Flex<"div">;
  weveLookedItUpYourUsernameIsUnique?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  search5?: p.Flex<"div">;
  rectangle28?: p.Flex<"div">;
  small3?: p.Flex<"div">;
  small4?: p.Flex<"div">;
  search6?: p.Flex<"div">;
  rectangle29?: p.Flex<"div">;
  small5?: p.Flex<"div">;
  small6?: p.Flex<"div">;
};

export interface DefaultLoginScreenInputFieldsProps {
  className?: string;
}

function PlasmicLoginScreenInputFields__RenderFunc(props: {
  variants: PlasmicLoginScreenInputFields__VariantsArgs;
  args: PlasmicLoginScreenInputFields__ArgsType;
  overrides: PlasmicLoginScreenInputFields__OverridesType;
  dataFetches?: PlasmicLoginScreenInputFields__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"frame46"}
        data-plasmic-override={overrides.frame46}
        hasGap={true}
        className={classNames(defaultcss.all, sty.frame46)}
      >
        <div
          data-plasmic-name={"group84"}
          data-plasmic-override={overrides.group84}
          className={classNames(defaultcss.all, sty.group84)}
        >
          <LoginScreenLastName
            data-plasmic-name={"loginScreenLastName"}
            data-plasmic-override={overrides.loginScreenLastName}
            className={classNames("__wab_instance", sty.loginScreenLastName)}
          />

          <LoginScreenFirstName
            data-plasmic-name={"loginScreenFirstName"}
            data-plasmic-override={overrides.loginScreenFirstName}
            className={classNames("__wab_instance", sty.loginScreenFirstName)}
          />
        </div>

        <LoginScreenUsername
          data-plasmic-name={"loginScreenUsername"}
          data-plasmic-override={overrides.loginScreenUsername}
          className={classNames("__wab_instance", sty.loginScreenUsername)}
        />

        <div
          data-plasmic-name={"search4"}
          data-plasmic-override={overrides.search4}
          className={classNames(defaultcss.all, sty.search4)}
        >
          <div
            data-plasmic-name={"rectangle27"}
            data-plasmic-override={overrides.rectangle27}
            className={classNames(defaultcss.all, sty.rectangle27)}
          />

          <div
            data-plasmic-name={"weveLookedItUpYourUsernameIsUnique"}
            data-plasmic-override={overrides.weveLookedItUpYourUsernameIsUnique}
            className={classNames(
              defaultcss.all,
              sty.weveLookedItUpYourUsernameIsUnique
            )}
          >
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox
              )}
            >
              {"Weâ€™ve looked it up, your username is unique!"}
            </div>
          </div>
        </div>

        {false ? (
          <div
            data-plasmic-name={"search5"}
            data-plasmic-override={overrides.search5}
            className={classNames(defaultcss.all, sty.search5)}
          >
            <div
              data-plasmic-name={"rectangle28"}
              data-plasmic-override={overrides.rectangle28}
              className={classNames(defaultcss.all, sty.rectangle28)}
            />

            <div
              data-plasmic-name={"small3"}
              data-plasmic-override={overrides.small3}
              className={classNames(defaultcss.all, sty.small3)}
            >
              <div
                data-plasmic-name={"small4"}
                data-plasmic-override={overrides.small4}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.small4
                )}
              >
                {"Email address"}
              </div>
            </div>
          </div>
        ) : null}
        {false ? (
          <div
            data-plasmic-name={"search6"}
            data-plasmic-override={overrides.search6}
            className={classNames(defaultcss.all, sty.search6)}
          >
            <div
              data-plasmic-name={"rectangle29"}
              data-plasmic-override={overrides.rectangle29}
              className={classNames(defaultcss.all, sty.rectangle29)}
            />

            <div
              data-plasmic-name={"small5"}
              data-plasmic-override={overrides.small5}
              className={classNames(defaultcss.all, sty.small5)}
            >
              <div
                data-plasmic-name={"small6"}
                data-plasmic-override={overrides.small6}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.small6
                )}
              >
                {"Password"}
              </div>
            </div>
          </div>
        ) : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame46",
    "group84",
    "loginScreenLastName",
    "loginScreenFirstName",
    "loginScreenUsername",
    "search4",
    "rectangle27",
    "weveLookedItUpYourUsernameIsUnique",
    "freeBox",
    "search5",
    "rectangle28",
    "small3",
    "small4",
    "search6",
    "rectangle29",
    "small5",
    "small6"
  ],
  frame46: [
    "frame46",
    "group84",
    "loginScreenLastName",
    "loginScreenFirstName",
    "loginScreenUsername",
    "search4",
    "rectangle27",
    "weveLookedItUpYourUsernameIsUnique",
    "freeBox",
    "search5",
    "rectangle28",
    "small3",
    "small4",
    "search6",
    "rectangle29",
    "small5",
    "small6"
  ],
  group84: ["group84", "loginScreenLastName", "loginScreenFirstName"],
  loginScreenLastName: ["loginScreenLastName"],
  loginScreenFirstName: ["loginScreenFirstName"],
  loginScreenUsername: ["loginScreenUsername"],
  search4: [
    "search4",
    "rectangle27",
    "weveLookedItUpYourUsernameIsUnique",
    "freeBox"
  ],
  rectangle27: ["rectangle27"],
  weveLookedItUpYourUsernameIsUnique: [
    "weveLookedItUpYourUsernameIsUnique",
    "freeBox"
  ],
  freeBox: ["freeBox"],
  search5: ["search5", "rectangle28", "small3", "small4"],
  rectangle28: ["rectangle28"],
  small3: ["small3", "small4"],
  small4: ["small4"],
  search6: ["search6", "rectangle29", "small5", "small6"],
  rectangle29: ["rectangle29"],
  small5: ["small5", "small6"],
  small6: ["small6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame46: "div";
  group84: "div";
  loginScreenLastName: typeof LoginScreenLastName;
  loginScreenFirstName: typeof LoginScreenFirstName;
  loginScreenUsername: typeof LoginScreenUsername;
  search4: "div";
  rectangle27: "div";
  weveLookedItUpYourUsernameIsUnique: "div";
  freeBox: "div";
  search5: "div";
  rectangle28: "div";
  small3: "div";
  small4: "div";
  search6: "div";
  rectangle29: "div";
  small5: "div";
  small6: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginScreenInputFields__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginScreenInputFields__VariantsArgs;
    args?: PlasmicLoginScreenInputFields__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLoginScreenInputFields__Fetches;
  } & Omit<PlasmicLoginScreenInputFields__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLoginScreenInputFields__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLoginScreenInputFields__ArgProps,
      internalVariantPropNames: PlasmicLoginScreenInputFields__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicLoginScreenInputFields__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginScreenInputFields";
  } else {
    func.displayName = `PlasmicLoginScreenInputFields.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginScreenInputFields = Object.assign(
  // Top-level PlasmicLoginScreenInputFields renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame46: makeNodeComponent("frame46"),
    group84: makeNodeComponent("group84"),
    loginScreenLastName: makeNodeComponent("loginScreenLastName"),
    loginScreenFirstName: makeNodeComponent("loginScreenFirstName"),
    loginScreenUsername: makeNodeComponent("loginScreenUsername"),
    search4: makeNodeComponent("search4"),
    rectangle27: makeNodeComponent("rectangle27"),
    weveLookedItUpYourUsernameIsUnique: makeNodeComponent(
      "weveLookedItUpYourUsernameIsUnique"
    ),
    freeBox: makeNodeComponent("freeBox"),
    search5: makeNodeComponent("search5"),
    rectangle28: makeNodeComponent("rectangle28"),
    small3: makeNodeComponent("small3"),
    small4: makeNodeComponent("small4"),
    search6: makeNodeComponent("search6"),
    rectangle29: makeNodeComponent("rectangle29"),
    small5: makeNodeComponent("small5"),
    small6: makeNodeComponent("small6"),

    // Metadata about props expected for PlasmicLoginScreenInputFields
    internalVariantProps: PlasmicLoginScreenInputFields__VariantProps,
    internalArgProps: PlasmicLoginScreenInputFields__ArgProps
  }
);

export default PlasmicLoginScreenInputFields;
/* prettier-ignore-end */
